#!/usr/bin/env python
# polo - CLI to trade on Poloniex by its RESTful API
#
# Copyright (c) 2016, 2018 Alvaro Figueiredo
# alvaro.af@gmail.com
#
# pip install requests

# Python 3 compatibility
# On Python 2: pip install future
from __future__ import unicode_literals, print_function
from builtins import bytes, str

import json
import hashlib
import hmac
import sys
import time
import requests
import urllib

# Python 3
import urllib3

# Load configuration
from settings import *

Help = '''\
Examples:

polo balance
polo summary                  # margin
polo tradable                 # margin
polo position BTC_ETH         # margin
polo long BTC_ETH 0.01981 10  # margin
polo short BTC_ETH 0.01981 10 # margin
polo close BTC_ETH            # margin
polo buy BTC_ETH 0.01981 10   # exchange
polo sell BTC_ETH 0.01981 10  # exchange
polo orders BTC_ETH
polo trades 40829005273
polo cancel 40829005273
polo move 40829005273 0.01981 [10]
polo transfer ETH 10 exchange margin
'''

def seturlencode():
    global urlencode

    if 2 == sys.version_info.major:
        # Python 2
        urlencode = urllib.urlencode
    elif 3 == sys.version_info.major:
        # Python 3
        urlencode = urllib.parse.urlencode
    else:
        raise Exception("Unknown Python version")

def request(params):
    global Secret, ApiKey, Proxy, ApiUrl, urlencode

    post = urlencode(params).encode('utf-8')
    sign = hmac.new(Secret, post, hashlib.sha512).hexdigest()
    headers = {'Sign': sign, 'Key': ApiKey}
    r = requests.post(ApiUrl, data=params, headers=headers, proxies=Proxy)
    return json.loads(r.text)

def requestparameters():
    global NonceFactor

    commands = {\
        'b0': 'returnBalances',
        'b1': 'returnCompleteBalances',
        'balance': 'returnAvailableAccountBalances',
        'summary': 'returnMarginAccountSummary',
        'position': 'getMarginPosition',
        'buy': 'buy',
        'long': 'marginBuy',
        'sell': 'sell',
        'short': 'marginSell',
        'move': 'moveOrder',
        'orders': 'returnOpenOrders',
        'cancel': 'cancelOrder',
        'trades': 'returnOrderTrades',
        'tradable': 'returnTradableBalances',
        'transfer': 'transferBalance',
        'close': 'closeMarginPosition'}
    params = dict()
    params['command'] = commands[sys.argv[1]]
    params['nonce'] = int(time.time()*NonceFactor)
    params['account'] = 'margin'
    params['lendingRate'] = 0.004
    params['currencyPair'] = 'all'
    if params['command'] in ('cancelOrder', 'returnOrderTrades', 'moveOrder'):
        params['orderNumber'] = sys.argv[2]
        if params['command'] == 'moveOrder':
            params['rate'] = float(sys.argv[3])
            if 4 < len(sys.argv):
                params['amount'] = float(sys.argv[4])
    elif params['command'] == 'transferBalance':
        params['currency'] = sys.argv[2].upper()
        params['amount'] = float(sys.argv[3])
        params['fromAccount'] = sys.argv[4]
        params['toAccount'] = sys.argv[5]
    elif 2 < len(sys.argv):
        currencyPair = sys.argv[2]
        if currencyPair != 'all':
            currencyPair = currencyPair.upper()
            if '_' not in currencyPair:
                currencyPair = 'BTC_' + currencyPair
        params['currencyPair'] = currencyPair
    if params['command'] in ('buy', 'marginBuy', 'sell', 'marginSell'):
        params['rate'] = float(sys.argv[3])
        params['amount'] = float(sys.argv[4])
    elif params['command'] == 'returnAvailableAccountBalances':
        params['account'] = 'all'
    return params

def main():
    global Help

    if sys.argv[1] == 'help':
        print(Help, end='')
        return
    seturlencode()
    params = requestparameters()
    response = request(params)
    print(json.dumps(response, sort_keys=True,
        separators=(',', ': '), indent=2))

if __name__ == '__main__':
    main()
