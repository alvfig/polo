#!/usr/bin/env python
# polo - CLI to trade on Poloniex by its RESTful API
#
# Copyright (c) 2016, 2018 Alvaro Figueiredo
# alvaro.af@gmail.com
#
# pip install requests


# Python 3 compatibility
# On Python 2: pip install future
from __future__ import unicode_literals, print_function
from builtins import bytes, str


import json
import hashlib
import hmac
import sys
import time
import requests
import urllib


Help = '''\
Examples:

polo balance
polo summary                  # margin
polo tradable                 # margin
polo position BTC_ETH         # margin
polo long BTC_ETH 0.01981 10  # margin
polo short BTC_ETH 0.01981 10 # margin
polo close BTC_ETH            # margin
polo buy BTC_ETH 0.01981 10   # exchange
polo sell BTC_ETH 0.01981 10  # exchange
polo orders BTC_ETH
polo trades 40829005273
polo cancel 40829005273
polo move 40829005273 0.01981 [10]
polo transfer ETH 10 exchange margin
'''


def encode(data):
    'Encode the data dictionary'
    return urlencode(data).encode('utf-8')


def sign(coding, secret):
    'Digitally sign the coding using the API Secret'
    return hmac.new(secret, coding, hashlib.sha512).hexdigest()


def request(url, key, sign, data, proxy):
    'Make a request to the API'
    headers = {'Key': key, 'Sign': sign}
    resp = requests.post(url, headers=headers, proxies=proxy, data=data)
    return json.loads(resp.text)


def nonce(factor=1000):
    'Evaluate the next nonce'
    return int(factor * time.time())


def assemble(args, nonceFactor):
    'Assemble the data dictionary from a command string'
    global NonceFactor

    commands = {\
        'b0': 'returnBalances',
        'b1': 'returnCompleteBalances',
        'balance': 'returnAvailableAccountBalances',
        'summary': 'returnMarginAccountSummary',
        'position': 'getMarginPosition',
        'buy': 'buy',
        'long': 'marginBuy',
        'sell': 'sell',
        'short': 'marginSell',
        'move': 'moveOrder',
        'orders': 'returnOpenOrders',
        'cancel': 'cancelOrder',
        'trades': 'returnOrderTrades',
        'tradable': 'returnTradableBalances',
        'transfer': 'transferBalance',
        'close': 'closeMarginPosition'}
    data = {}
    data['command'] = commands[args[1]]
    data['nonce'] = nonce(nonceFactor)
    data['account'] = 'margin'
    data['lendingRate'] = 0.004
    data['currencyPair'] = 'all'
    if data['command'] in ('cancelOrder', 'returnOrderTrades', 'moveOrder'):
        data['orderNumber'] = args[2]
        if data['command'] == 'moveOrder':
            data['rate'] = float(args[3])
            if 4 < len(args):
                data['amount'] = float(args[4])
    elif data['command'] == 'transferBalance':
        data['currency'] = args[2].upper()
        data['amount'] = float(args[3])
        data['fromAccount'] = args[4]
        data['toAccount'] = args[5]
    elif 2 < len(args):
        currencyPair = args[2]
        if currencyPair != 'all':
            currencyPair = currencyPair.upper()
            if '_' not in currencyPair:
                currencyPair = 'BTC_' + currencyPair
        data['currencyPair'] = currencyPair
    if data['command'] in ('buy', 'marginBuy', 'sell', 'marginSell'):
        data['rate'] = float(args[3])
        data['amount'] = float(args[4])
    elif data['command'] == 'returnAvailableAccountBalances':
        data['account'] = 'all'
    return data


def main(args):
    'Drive the execution if it is called as a program'
    import settings
    global Help

    if args[1] == 'help':
        print(Help, end='')
        return
    data = assemble(args, settings.NonceFactor)
    coding = encode(data)
    sign_ = sign(coding, settings.Secret)
    response = request(settings.ApiUrl, settings.ApiKey, sign_, data, settings.Proxy)
    print(json.dumps(response, sort_keys=True,
        separators=(',', ': '), indent=2))


def _seturlencode():
    'Set which urllib.urlencode function to use depending on version of Python'
    if 2 == sys.version_info.major:
        # Python 2
        urlencode = urllib.urlencode
    elif 3 == sys.version_info.major:
        # Python 3
        import urllib3
        urlencode = urllib.parse.urlencode
    else:
        raise Exception("Unknown Python version")
    return urlencode


urlencode = _seturlencode()


if __name__ == '__main__':
    main(sys.argv)
