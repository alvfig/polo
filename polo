#!/usr/bin/env python
"""polo

CLI and library to trade on the Poloniex exchange by its RESTful API
https://poloniex.com

Copyright (c) 2016, 2018 Alvaro Figueiredo
alvaro.af@gmail.com

On Python 3:
pip install requests

On Python 2:
pip install requests
pip install future
"""


from __future__ import unicode_literals, print_function
from builtins import str


try:
    # Python 2
    from urllib import urlencode
except ImportError:
    # Python 3
    import urllib3
    from urllib.parse import urlencode


import json
import hashlib
import hmac
import sys
import time
import requests


_APIURL = 'https://poloniex.com/tradingApi'
_LENDINGRATE = 0.004
HELP = '''\
Examples:

polo balance
polo summary                  # margin
polo tradable                 # margin
polo position BTC_ETH         # margin
polo long BTC_ETH 0.01981 10  # margin
polo short BTC_ETH 0.01981 10 # margin
polo close BTC_ETH            # margin
polo buy BTC_ETH 0.01981 10   # exchange
polo sell BTC_ETH 0.01981 10  # exchange
polo orders BTC_ETH
polo trades 40829005273
polo cancel 40829005273
polo move 40829005273 0.01981 [10]
polo transfer ETH 10 exchange margin
'''


def nonce(factor=3000000000):
    """Evaluate the next nonce"""
    return int(factor * time.time())


class RequestData(dict):
    """Assemble the data to make a request to the API"""

    def __init__(self, args, nonce_=None):
        super(RequestData, self).__init__()
        if isinstance(args, str):
            args = args.split()
        if not isinstance(args, list):
            raise TypeError('args must be a list or a string')
        self.args = args
        self['nonce'] = nonce_ if nonce_ is not None else nonce()
        assemble_method_name = '_assemble_' + self.args[1]
        try:
            assemble_method = getattr(RequestData, assemble_method_name)
        except AttributeError:
            raise NameError('invalid command: ' + self.args[1]) from None
        assemble_method(self)

    def _currency_pair_helper(self):
        # Parse the currency pair from args
        if 2 < len(self.args):
            curr_pair = self.args[2]
            if curr_pair != 'all':
                curr_pair = curr_pair.upper()
                if '_' not in curr_pair:
                    curr_pair = 'BTC_' + curr_pair
        else:
            curr_pair = 'all'
        self['currencyPair'] = curr_pair

    def _assemble_balance(self):
        self['command'] = 'returnAvailableAccountBalances'
        self['account'] = 'all'

    def _assemble_summary(self):
        self['command'] = 'returnMarginAccountSummary'

    def _assemble_position(self):
        self['command'] = 'getMarginPosition'
        self._currency_pair_helper()

    def _order_helper(self):
        self['rate'] = float(self.args[3])
        self['amount'] = float(self.args[4])
        self._currency_pair_helper()

    def _assemble_buy(self):
        self['command'] = 'buy'
        self._order_helper()

    def _assemble_long(self):
        self['command'] = 'marginBuy'
        self['lendingRate'] = _LENDINGRATE
        self._order_helper()

    def _assemble_sell(self):
        self['command'] = 'sell'
        self._order_helper()

    def _assemble_short(self):
        self['command'] = 'marginSell'
        self['lendingRate'] = _LENDINGRATE
        self._order_helper()

    def _assemble_move(self):
        self['command'] = 'moveOrder'
        self['orderNumber'] = self.args[2]
        self['rate'] = float(self.args[3])
        if 4 < len(self.args):
            self['amount'] = float(self.args[4])

    def _assemble_orders(self):
        self['command'] = 'returnOpenOrders'
        self._currency_pair_helper()

    def _assemble_cancel(self):
        self['command'] = 'cancelOrder'
        self['orderNumber'] = self.args[2]

    def _assemble_trades(self):
        self['command'] = 'returnOrderTrades'
        self['orderNumber'] = self.args[2]

    def _assemble_tradable(self):
        self['command'] = 'returnTradableBalances'

    def _assemble_transfer(self):
        self['command'] = 'transferBalance'
        self['currency'] = self.args[2].upper
        self['amount'] = float(self.args[3])
        self['fromAccount'] = self.args[4]
        self['toAccount'] = self.args[5]

    def _assemble_close(self):
        self['command'] = 'closeMarginPosition'
        self._currency_pair_helper()


def encode(data):
    """Encode the data dictionary"""
    return urlencode(data).encode('utf-8')


def sign(secret, coding):
    """Digitally sign the coding using the API Secret"""
    return hmac.new(secret, coding, hashlib.sha512).hexdigest()


def request(apikey, sign_, data, proxy=None):
    """Make a request to the API"""
    headers = {'Key': apikey, 'Sign': sign_}
    resp = requests.post(_APIURL, headers=headers, proxies=proxy, data=data)
    return json.loads(resp.text)


def main(args):
    """Drive the execution if it is called as a program"""
    import settings
    if args[1] == 'help':
        print(HELP, end='')
        return
    nonce_ = nonce(settings.NonceFactor)
    data = RequestData(args, nonce_)
    coding = encode(data)
    sign_ = sign(settings.Secret, coding)
    response = request(settings.ApiKey, sign_, data, settings.Proxy)
    print(
        json.dumps(
            response,
            sort_keys=True,
            separators=(',', ': '),
            indent=2
        )
    )


if __name__ == '__main__':
    main(sys.argv)
